<<<<<<< HEAD
function ArgumentOutOfRangeErrorImpl() {
    Error.call(this);
    this.message = 'argument out of range';
    this.name = 'ArgumentOutOfRangeError';
    return this;
}
ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
export const ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;
//# sourceMappingURL=ArgumentOutOfRangeError.js.map
||||||| merged common ancestors
=======
<<<<<<< HEAD
export class ArgumentOutOfRangeError extends Error {
    constructor() {
        super('argument out of range');
        this.name = 'ArgumentOutOfRangeError';
        Object.setPrototypeOf(this, ArgumentOutOfRangeError.prototype);
    }
}
//# sourceMappingURL=ArgumentOutOfRangeError.js.map
||||||| merged common ancestors
=======
function ArgumentOutOfRangeErrorImpl() {
    Error.call(this);
    this.message = 'argument out of range';
    this.name = 'ArgumentOutOfRangeError';
    return this;
}
ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
export const ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;
//# sourceMappingURL=ArgumentOutOfRangeError.js.map
>>>>>>> 1b023684bf57de724b98ec9602a7d5b5f83ebc0f
>>>>>>> master
