<<<<<<< HEAD
import { Observable } from '../Observable';
import { OperatorFunction } from '../../internal/types';
export declare function first<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;
export declare function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S, defaultValue?: S): OperatorFunction<T, S>;
export declare function first<T, D = T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, defaultValue?: D): OperatorFunction<T, T | D>;
||||||| merged common ancestors
=======
<<<<<<< HEAD
import { Observable } from '../Observable';
import { MonoTypeOperatorFunction, OperatorFunction } from '../../internal/types';
export declare function first<T>(predicate?: null, defaultValue?: T): MonoTypeOperatorFunction<T>;
export declare function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S, defaultValue?: T): OperatorFunction<T, S>;
export declare function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, defaultValue?: T): MonoTypeOperatorFunction<T>;
||||||| merged common ancestors
=======
import { Observable } from '../Observable';
import { OperatorFunction } from '../../internal/types';
export declare function first<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;
export declare function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S, defaultValue?: S): OperatorFunction<T, S>;
export declare function first<T, D = T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, defaultValue?: D): OperatorFunction<T, T | D>;
>>>>>>> 1b023684bf57de724b98ec9602a7d5b5f83ebc0f
>>>>>>> master
