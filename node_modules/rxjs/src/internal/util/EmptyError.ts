<<<<<<< HEAD
export interface EmptyError extends Error {
}

export interface EmptyErrorCtor {
  new(): EmptyError;
}

function EmptyErrorImpl(this: any) {
  Error.call(this);
  this.message = 'no elements in sequence';
  this.name = 'EmptyError';
  return this;
}

EmptyErrorImpl.prototype = Object.create(Error.prototype);

/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
export const EmptyError: EmptyErrorCtor = EmptyErrorImpl as any;
||||||| merged common ancestors
=======
<<<<<<< HEAD
/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
export class EmptyError extends Error {

  public readonly name = 'EmptyError';

  constructor() {
    super('no elements in sequence');
    (Object as any).setPrototypeOf(this, EmptyError.prototype);
  }
}
||||||| merged common ancestors
=======
export interface EmptyError extends Error {
}

export interface EmptyErrorCtor {
  new(): EmptyError;
}

function EmptyErrorImpl(this: any) {
  Error.call(this);
  this.message = 'no elements in sequence';
  this.name = 'EmptyError';
  return this;
}

EmptyErrorImpl.prototype = Object.create(Error.prototype);

/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
export const EmptyError: EmptyErrorCtor = EmptyErrorImpl as any;
>>>>>>> 1b023684bf57de724b98ec9602a7d5b5f83ebc0f
>>>>>>> master
