<<<<<<< HEAD
import { MonoTypeOperatorFunction } from '../types';
export declare function distinctUntilKeyChanged<T>(key: keyof T): MonoTypeOperatorFunction<T>;
export declare function distinctUntilKeyChanged<T, K extends keyof T>(key: K, compare: (x: T[K], y: T[K]) => boolean): MonoTypeOperatorFunction<T>;
||||||| merged common ancestors
=======
<<<<<<< HEAD
import { MonoTypeOperatorFunction } from '../types';
export declare function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;
export declare function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;
||||||| merged common ancestors
=======
import { MonoTypeOperatorFunction } from '../types';
export declare function distinctUntilKeyChanged<T>(key: keyof T): MonoTypeOperatorFunction<T>;
export declare function distinctUntilKeyChanged<T, K extends keyof T>(key: K, compare: (x: T[K], y: T[K]) => boolean): MonoTypeOperatorFunction<T>;
>>>>>>> 1b023684bf57de724b98ec9602a7d5b5f83ebc0f
>>>>>>> master
