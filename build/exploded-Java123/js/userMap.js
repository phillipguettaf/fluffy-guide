/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/main/webapp/dev/js/common/countryCodes.js":
/*!*******************************************************!*\
  !*** ./src/main/webapp/dev/js/common/countryCodes.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// Country code data from:\n// https://gist.github.com/maephisto/9228207\n// https://github.com/michaelwittig/node-i18n-iso-countries/blob/master/codes.js\n\n/* eslint quote-props: [\"error\", \"always\"] */\n\nvar countryToCode = {\n    'Afghanistan': 'AFG',\n    'Aland Islands': 'ALA',\n    'Albania': 'ALB',\n    'Algeria': 'DZA',\n    'American Samoa': 'ASM',\n    'Andorra': 'AND',\n    'Angola': 'AGO',\n    'Anguilla': 'AIA',\n    'Antarctica': 'ATA',\n    'Antigua And Barbuda': 'ATG',\n    'Argentina': 'ARG',\n    'Armenia': 'ARM',\n    'Aruba': 'ABW',\n    'Australia': 'AUS',\n    'Austria': 'AUT',\n    'Azerbaijan': 'AZE',\n    'Bahamas': 'BHS',\n    'Bahrain': 'BHR',\n    'Bangladesh': 'BGD',\n    'Barbados': 'BRB',\n    'Belarus': 'BLR',\n    'Belgium': 'BEL',\n    'Belize': 'BLZ',\n    'Benin': 'BEN',\n    'Bermuda': 'BMU',\n    'Bhutan': 'BTN',\n    'Bolivia': 'BOL',\n    'Bosnia And Herzegovina': 'BIH',\n    'Botswana': 'BWA',\n    'Bouvet Island': 'BVT',\n    'Brazil': 'BRA',\n    'British Indian Ocean Territory': 'IOT',\n    'Brunei Darussalam': 'BRN',\n    'Bulgaria': 'BGR',\n    'Burkina Faso': 'BFA',\n    'Burundi': 'BDI',\n    'Cambodia': 'KHM',\n    'Cameroon': 'CMR',\n    'Canada': 'CAN',\n    'Cape Verde': 'CPV',\n    'Cayman Islands': 'CYM',\n    'Central African Republic': 'CAF',\n    'Chad': 'TCD',\n    'Chile': 'CHL',\n    'China': 'CHN',\n    'Christmas Island': 'CXR',\n    'Cocos (Keeling) Islands': 'CCK',\n    'Colombia': 'COL',\n    'Comoros': 'COM',\n    'Congo': 'COG',\n    'Congo, Democratic Republic': 'COD',\n    'Cook Islands': 'COK',\n    'Costa Rica': 'CRI',\n    'Cote D\\'Ivoire': 'CIV',\n    'Croatia': 'HRV',\n    'Cuba': 'CUB',\n    'Cyprus': 'CYP',\n    'Czech Republic': 'CZE',\n    'Denmark': 'DNK',\n    'Djibouti': 'DJI',\n    'Dominica': 'DMA',\n    'Dominican Republic': 'DOM',\n    'Ecuador': 'ECU',\n    'Egypt': 'EGY',\n    'El Salvador': 'SLV',\n    'Equatorial Guinea': 'GNQ',\n    'Eritrea': 'ERI',\n    'Estonia': 'EST',\n    'Ethiopia': 'ETH',\n    'Falkland Islands (Malvinas)': 'FLK',\n    'Faroe Islands': 'FRO',\n    'Fiji': 'FJI',\n    'Finland': 'FIN',\n    'France': 'FRA',\n    'French Guiana': 'GUF',\n    'French Polynesia': 'PYF',\n    'French Southern Territories': 'ATF',\n    'Gabon': 'GAB',\n    'Gambia': 'GMB',\n    'Georgia': 'GEO',\n    'Germany': 'DEU',\n    'Ghana': 'GHA',\n    'Gibraltar': 'GIB',\n    'Greece': 'GRC',\n    'Greenland': 'GRL',\n    'Grenada': 'GRD',\n    'Guadeloupe': 'GLP',\n    'Guam': 'GUM',\n    'Guatemala': 'GTM',\n    'Guernsey': 'GGY',\n    'Guinea': 'GIN',\n    'Guinea-Bissau': 'GNB',\n    'Guyana': 'GUY',\n    'Haiti': 'HTI',\n    'Heard Island & Mcdonald Islands': 'HMD',\n    'Holy See (Vatican City State)': 'VAT',\n    'Honduras': 'HND',\n    'Hong Kong': 'HKG',\n    'Hungary': 'HUN',\n    'Iceland': 'ISL',\n    'India': 'IND',\n    'Indonesia': 'IDN',\n    'Iran': 'IRN',\n    'Iran, Islamic Republic Of': 'IRN',\n    'Iraq': 'IRQ',\n    'Ireland': 'IRL',\n    'Isle Of Man': 'IMN',\n    'Israel': 'ISR',\n    'Italy': 'ITA',\n    'Jamaica': 'JAM',\n    'Japan': 'JPN',\n    'Jersey': 'JEY',\n    'Jordan': 'JOR',\n    'Kazakhstan': 'KAZ',\n    'Kenya': 'KEN',\n    'Kiribati': 'KIR',\n    'Korea': 'KOR',\n    'South Korea': 'KOR',\n    'Republic of Korea': 'KOR',\n    'Kuwait': 'KWT',\n    'Kyrgyzstan': 'KGZ',\n    'Lao People\\'s Democratic Republic': 'LAO',\n    'Latvia': 'LVA',\n    'Lebanon': 'LBN',\n    'Lesotho': 'LSO',\n    'Liberia': 'LBR',\n    'Libyan Arab Jamahiriya': 'LBY',\n    'Liechtenstein': 'LIE',\n    'Lithuania': 'LTU',\n    'Luxembourg': 'LUX',\n    'Macao': 'MAC',\n    'Macau': 'MAC',\n    'Macedonia': 'MKD',\n    'Madagascar': 'MDG',\n    'Malawi': 'MWI',\n    'Malaysia': 'MYS',\n    'Maldives': 'MDV',\n    'Mali': 'MLI',\n    'Malta': 'MLT',\n    'Marshall Islands': 'MHL',\n    'Martinique': 'MTQ',\n    'Mauritania': 'MRT',\n    'Mauritius': 'MUS',\n    'Mayotte': 'MYT',\n    'Mexico': 'MEX',\n    'MÃ©xico': 'MEX',\n    'Micronesia, Federated States Of': 'FSM',\n    'Moldova': 'MDA',\n    'Monaco': 'MCO',\n    'Mongolia': 'MNG',\n    'Montenegro': 'MNE',\n    'Montserrat': 'MSR',\n    'Morocco': 'MAR',\n    'Mozambique': 'MOZ',\n    'Myanmar': 'MMR',\n    'Namibia': 'NAM',\n    'Nauru': 'NRU',\n    'Nepal': 'NPL',\n    'Netherland': 'NLD',\n    'Netherlands': 'NLD',\n    'New Caledonia': 'NCL',\n    'New Zealand': 'NZL',\n    'Nicaragua': 'NIC',\n    'Niger': 'NER',\n    'Nigeria': 'NGA',\n    'Niue': 'NIU',\n    'Norfolk Island': 'NFK',\n    'Northern Mariana Islands': 'MNP',\n    'Norway': 'NOR',\n    'Oman': 'OMN',\n    'Pakistan': 'PAK',\n    'Palau': 'PLW',\n    'Palestine': 'PSE',\n    'Panama': 'PAN',\n    'Papua New Guinea': 'PNG',\n    'Paraguay': 'PRY',\n    'Peru': 'PER',\n    'Philippines': 'PHL',\n    'Pitcairn': 'PCN',\n    'Poland': 'POL',\n    'Portugal': 'PRT',\n    'Puerto Rico': 'PRI',\n    'Qatar': 'QAT',\n    'Reunion': 'REU',\n    'Romania': 'ROU',\n    'Russia': 'RUS',\n    'Russian Federation': 'RUS',\n    'Rwanda': 'RWA',\n    'Saint Barthelemy': 'BLM',\n    'Saint Helena': 'SHN',\n    'Saint Kitts And Nevis': 'KNA',\n    'Saint Lucia': 'LCA',\n    'Saint Martin': 'MAF',\n    'Saint Pierre And Miquelon': 'SPM',\n    'Saint Vincent And Grenadines': 'VCT',\n    'Samoa': 'WSM',\n    'San Marino': 'SMR',\n    'Sao Tome And Principe': 'STP',\n    'Saudi Arabia': 'SAU',\n    'Senegal': 'SEN',\n    'Serbia': 'SRB',\n    'Seychelles': 'SYC',\n    'Sierra Leone': 'SLE',\n    'Singapore': 'SGP',\n    'Slovakia': 'SVK',\n    'Slovenia': 'SVN',\n    'Solomon Islands': 'SLB',\n    'Somalia': 'SOM',\n    'South Africa': 'ZAF',\n    'South Georgia And Sandwich Isl.': 'SGS',\n    'Spain': 'ESP',\n    'Sri Lanka': 'LKA',\n    'Sudan': 'SDN',\n    'Suriname': 'SUR',\n    'Svalbard And Jan Mayen': 'SJM',\n    'Swaziland': 'SWZ',\n    'Sweden': 'SWE',\n    'Switzerland': 'CHE',\n    'Syrian Arab Republic': 'SYR',\n    'Taiwan': 'TWN',\n    'Tajikistan': 'TJK',\n    'Tanzania': 'TZA',\n    'Thailand': 'THA',\n    'Timor-Leste': 'TLS',\n    'Togo': 'TGO',\n    'Tokelau': 'TKL',\n    'Tonga': 'TON',\n    'Trinidad And Tobago': 'TTO',\n    'Tunisia': 'TUN',\n    'Turkey': 'TUR',\n    'Turkmenistan': 'TKM',\n    'Turks And Caicos Islands': 'TCA',\n    'Tuvalu': 'TUV',\n    'Uganda': 'UGA',\n    'Ukraine': 'UKR',\n    'UAE': 'ARE',\n    'United Arab Emirates': 'ARE',\n    'United Kingdom': 'GBR',\n    'Scotland': 'GBR',\n    'UK': 'GBR',\n    'US': 'USA',\n    'United States': 'USA',\n    'United States Outlying Islands': 'UMI',\n    'Uruguay': 'URY',\n    'Uzbekistan': 'UZB',\n    'Vanuatu': 'VUT',\n    'Venezuela': 'VEN',\n    'Vietnam': 'VNM',\n    'Viet Nam': 'VNM',\n    'Virgin Islands, British': 'VGB',\n    'Virgin Islands, U.S.': 'VIR',\n    'Wallis And Futuna': 'WLF',\n    'Western Sahara': 'ESH',\n    'Yemen': 'YEM',\n    'Zambia': 'ZMB',\n    'Zimbabwe': 'ZWE'\n};\n\nvar codeToCountryName = {\n    'AFG': 'Afghanistan',\n    'ALA': 'Aland Islands',\n    'ALB': 'Albania',\n    'DZA': 'Algeria',\n    'ASM': 'American Samoa',\n    'AND': 'Andorra',\n    'AGO': 'Angola',\n    'AIA': 'Anguilla',\n    'ATA': 'Antarctica',\n    'ATG': 'Antigua And Barbuda',\n    'ARG': 'Argentina',\n    'ARM': 'Armenia',\n    'ABW': 'Aruba',\n    'AUS': 'Australia',\n    'AUT': 'Austria',\n    'AZE': 'Azerbaijan',\n    'BHS': 'Bahamas',\n    'BHR': 'Bahrain',\n    'BGD': 'Bangladesh',\n    'BRB': 'Barbados',\n    'BLR': 'Belarus',\n    'BEL': 'Belgium',\n    'BLZ': 'Belize',\n    'BEN': 'Benin',\n    'BMU': 'Bermuda',\n    'BTN': 'Bhutan',\n    'BOL': 'Bolivia',\n    'BIH': 'Bosnia And Herzegovina',\n    'BWA': 'Botswana',\n    'BVT': 'Bouvet Island',\n    'BRA': 'Brazil',\n    'IOT': 'British Indian Ocean Territory',\n    'BRN': 'Brunei Darussalam',\n    'BGR': 'Bulgaria',\n    'BFA': 'Burkina Faso',\n    'BDI': 'Burundi',\n    'KHM': 'Cambodia',\n    'CMR': 'Cameroon',\n    'CAN': 'Canada',\n    'CPV': 'Cape Verde',\n    'CYM': 'Cayman Islands',\n    'CAF': 'Central African Republic',\n    'TCD': 'Chad',\n    'CHL': 'Chile',\n    'CHN': 'China',\n    'CXR': 'Christmas Island',\n    'CCK': 'Cocos (Keeling) Islands',\n    'COL': 'Colombia',\n    'COM': 'Comoros',\n    'COG': 'Congo',\n    'COD': 'Congo, Democratic Republic',\n    'COK': 'Cook Islands',\n    'CRI': 'Costa Rica',\n    'CIV': 'Cote D\\'Ivoire',\n    'HRV': 'Croatia',\n    'CUB': 'Cuba',\n    'CYP': 'Cyprus',\n    'CZE': 'Czech Republic',\n    'DNK': 'Denmark',\n    'DJI': 'Djibouti',\n    'DMA': 'Dominica',\n    'DOM': 'Dominican Republic',\n    'ECU': 'Ecuador',\n    'EGY': 'Egypt',\n    'SLV': 'El Salvador',\n    'GNQ': 'Equatorial Guinea',\n    'ERI': 'Eritrea',\n    'EST': 'Estonia',\n    'ETH': 'Ethiopia',\n    'FLK': 'Falkland Islands (Malvinas)',\n    'FRO': 'Faroe Islands',\n    'FJI': 'Fiji',\n    'FIN': 'Finland',\n    'FRA': 'France',\n    'GUF': 'French Guiana',\n    'PYF': 'French Polynesia',\n    'ATF': 'French Southern Territories',\n    'GAB': 'Gabon',\n    'GMB': 'Gambia',\n    'GEO': 'Georgia',\n    'DEU': 'Germany',\n    'GHA': 'Ghana',\n    'GIB': 'Gibraltar',\n    'GRC': 'Greece',\n    'GRL': 'Greenland',\n    'GRD': 'Grenada',\n    'GLP': 'Guadeloupe',\n    'GUM': 'Guam',\n    'GTM': 'Guatemala',\n    'GGY': 'Guernsey',\n    'GIN': 'Guinea',\n    'GNB': 'Guinea-Bissau',\n    'GUY': 'Guyana',\n    'HTI': 'Haiti',\n    'HMD': 'Heard Island & Mcdonald Islands',\n    'VAT': 'Holy See (Vatican City State)',\n    'HND': 'Honduras',\n    'HKG': 'Hong Kong',\n    'HUN': 'Hungary',\n    'ISL': 'Iceland',\n    'IND': 'India',\n    'IDN': 'Indonesia',\n    'IRN': 'Iran',\n    'IRQ': 'Iraq',\n    'IRL': 'Ireland',\n    'IMN': 'Isle Of Man',\n    'ISR': 'Israel',\n    'ITA': 'Italy',\n    'JAM': 'Jamaica',\n    'JPN': 'Japan',\n    'JEY': 'Jersey',\n    'JOR': 'Jordan',\n    'KAZ': 'Kazakhstan',\n    'KEN': 'Kenya',\n    'KIR': 'Kiribati',\n    'KOR': 'Republic of Korea',\n    'KWT': 'Kuwait',\n    'KGZ': 'Kyrgyzstan',\n    'LAO': 'Lao People\\'s Democratic Republic',\n    'LVA': 'Latvia',\n    'LBN': 'Lebanon',\n    'LSO': 'Lesotho',\n    'LBR': 'Liberia',\n    'LBY': 'Libyan Arab Jamahiriya',\n    'LIE': 'Liechtenstein',\n    'LTU': 'Lithuania',\n    'LUX': 'Luxembourg',\n    'MAC': 'Macau',\n    'MKD': 'Macedonia',\n    'MDG': 'Madagascar',\n    'MWI': 'Malawi',\n    'MYS': 'Malaysia',\n    'MDV': 'Maldives',\n    'MLI': 'Mali',\n    'MLT': 'Malta',\n    'MHL': 'Marshall Islands',\n    'MTQ': 'Martinique',\n    'MRT': 'Mauritania',\n    'MUS': 'Mauritius',\n    'MYT': 'Mayotte',\n    'MEX': 'Mexico',\n    'FSM': 'Micronesia, Federated States Of',\n    'MDA': 'Moldova',\n    'MCO': 'Monaco',\n    'MNG': 'Mongolia',\n    'MNE': 'Montenegro',\n    'MSR': 'Montserrat',\n    'MAR': 'Morocco',\n    'MOZ': 'Mozambique',\n    'MMR': 'Myanmar',\n    'NAM': 'Namibia',\n    'NRU': 'Nauru',\n    'NPL': 'Nepal',\n    'NLD': 'Netherlands',\n    'NCL': 'New Caledonia',\n    'NZL': 'New Zealand',\n    'NIC': 'Nicaragua',\n    'NER': 'Niger',\n    'NGA': 'Nigeria',\n    'NIU': 'Niue',\n    'NFK': 'Norfolk Island',\n    'MNP': 'Northern Mariana Islands',\n    'NOR': 'Norway',\n    'OMN': 'Oman',\n    'PAK': 'Pakistan',\n    'PLW': 'Palau',\n    'PSE': 'Palestine',\n    'PAN': 'Panama',\n    'PNG': 'Papua New Guinea',\n    'PRY': 'Paraguay',\n    'PER': 'Peru',\n    'PHL': 'Philippines',\n    'PCN': 'Pitcairn',\n    'POL': 'Poland',\n    'PRT': 'Portugal',\n    'PRI': 'Puerto Rico',\n    'QAT': 'Qatar',\n    'REU': 'Reunion',\n    'ROU': 'Romania',\n    'RUS': 'Russia',\n    'RWA': 'Rwanda',\n    'BLM': 'Saint Barthelemy',\n    'SHN': 'Saint Helena',\n    'KNA': 'Saint Kitts And Nevis',\n    'LCA': 'Saint Lucia',\n    'MAF': 'Saint Martin',\n    'SPM': 'Saint Pierre And Miquelon',\n    'VCT': 'Saint Vincent And Grenadines',\n    'WSM': 'Samoa',\n    'SMR': 'San Marino',\n    'STP': 'Sao Tome And Principe',\n    'SAU': 'Saudi Arabia',\n    'SEN': 'Senegal',\n    'SRB': 'Serbia',\n    'SYC': 'Seychelles',\n    'SLE': 'Sierra Leone',\n    'SGP': 'Singapore',\n    'SVK': 'Slovakia',\n    'SVN': 'Slovenia',\n    'SLB': 'Solomon Islands',\n    'SOM': 'Somalia',\n    'ZAF': 'South Africa',\n    'SGS': 'South Georgia And Sandwich Isl.',\n    'ESP': 'Spain',\n    'LKA': 'Sri Lanka',\n    'SDN': 'Sudan',\n    'SUR': 'Suriname',\n    'SJM': 'Svalbard And Jan Mayen',\n    'SWZ': 'Swaziland',\n    'SWE': 'Sweden',\n    'CHE': 'Switzerland',\n    'SYR': 'Syrian Arab Republic',\n    'TWN': 'Taiwan',\n    'TJK': 'Tajikistan',\n    'TZA': 'Tanzania',\n    'THA': 'Thailand',\n    'TLS': 'Timor-Leste',\n    'TGO': 'Togo',\n    'TKL': 'Tokelau',\n    'TON': 'Tonga',\n    'TTO': 'Trinidad And Tobago',\n    'TUN': 'Tunisia',\n    'TUR': 'Turkey',\n    'TKM': 'Turkmenistan',\n    'TCA': 'Turks And Caicos Islands',\n    'TUV': 'Tuvalu',\n    'UGA': 'Uganda',\n    'UKR': 'Ukraine',\n    'ARE': 'United Arab Emirates',\n    'GBR': 'United Kingdom',\n    'USA': 'United States',\n    'UMI': 'United States Outlying Islands',\n    'URY': 'Uruguay',\n    'UZB': 'Uzbekistan',\n    'VUT': 'Vanuatu',\n    'VEN': 'Venezuela',\n    'VNM': 'Vietnam',\n    'VGB': 'Virgin Islands, British',\n    'VIR': 'Virgin Islands, U.S.',\n    'WLF': 'Wallis And Futuna',\n    'ESH': 'Western Sahara',\n    'YEM': 'Yemen',\n    'ZMB': 'Zambia',\n    'ZWE': 'Zimbabwe'\n};\n\n/**\n * Get the corresponding alpha 3 code for the country name\n * Returns the code directly if the countryName is already the code\n *\n * @param  {String} countryName either full name or alpha 3 country code\n *\n * @return {String} Corresponding country code\n */\nfunction getCountryCode(countryName) {\n    if (countryName in codeToCountryName) {\n        // the country name is actually an alpha 3 code\n        return countryName;\n    }\n    if (countryName in countryToCode) {\n        // country name is defined, return the corresponding alpha 3 code\n        return countryToCode[countryName];\n    }\n    // no such country or country code\n    return null;\n}\n\nexports.getCountryCode = getCountryCode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/webapp/dev/js/common/countryCodes.js\n");

/***/ }),

/***/ "./src/main/webapp/dev/js/main/userMap.js":
/*!************************************************!*\
  !*** ./src/main/webapp/dev/js/main/userMap.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _countryCodes = __webpack_require__(/*! ../common/countryCodes */ \"./src/main/webapp/dev/js/common/countryCodes.js\");\n\nfunction getTooltipContent(data) {\n    return '<div class=\"hoverinfo\">\\n                <p>\\n                    <b>' + data.name + '</b>\\n                    <br>Institutions: ' + data.numOfInstitutions + '\\n                </p>\\n            </div>';\n} /* global d3:false Datamap:false */\n\nfunction handleError() {\n    var contentHolder = d3.select('.container');\n    contentHolder.html('');\n    contentHolder.append('p').text('An error has occured in getting data, please try reloading.');\n    contentHolder.append('p').html('If the problem persists after a few retries, please <a href=\"/contact.jsp\">contact us</a>.');\n}\n\nfunction initializeMap(err, countryCoordinates, userData) {\n    // based on example from https://github.com/markmarkoh/datamaps/blob/master/src/examples/highmaps_world.html\n    // Country code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\n    if (err) {\n        handleError();\n        return null;\n    }\n    var userCountries = Object.keys(userData.institutes);\n    var countriesArr = [];\n    var total = 0;\n    var date = userData.lastUpdated;\n    userCountries.forEach(function (countryName) {\n        var countryTotal = userData.institutes[countryName].length;\n\n        countriesArr.push([countryName, countryTotal]);\n        total += countryTotal;\n    });\n\n    // set the last updated date in the page\n    $('#lastUpdate').html(date);\n    // set the institution count in the page\n    $('#totalUserCount').html(total);\n    // set the country count in the page\n    $('#totalCountryCount').html(userCountries.length);\n\n    // Data format example\n    // var series = [\n    //     ['United States', 1], ['Bulgaria', 1], ['Russia', 1], ['France', 1], ['Singapore', 1]\n\n    var dataset = {};\n    var pins = [];\n    var onlyValues = countriesArr.map(function (obj) {\n        return obj[1];\n    });\n    var minValue = Math.min.apply(null, onlyValues);\n    var maxValue = Math.max.apply(null, onlyValues);\n    var paletteScale = d3.scale.linear().domain([minValue, maxValue]).range(['#428bca', '#428bca']); // Choropleth effect: .range(['#C1F0F6\",\"#4895AE\"]);\n    countriesArr.forEach(function (item) {\n        var countryName = item[0];\n        var iso = (0, _countryCodes.getCountryCode)(countryName);\n        var value = item[1];\n        var coordinates = countryCoordinates[iso];\n        dataset[iso] = {\n            numOfInstitutions: value,\n            fillColor: paletteScale(value)\n        };\n        pins.push({\n            name: countryName,\n            numOfInstitutions: value,\n            latitude: coordinates.lat,\n            longitude: coordinates.lon\n        });\n    });\n\n    // World-map\n    var map = new Datamap({\n        scope: 'world',\n        element: $('#world-map').get(0),\n        responsive: true,\n        setProjection: function setProjection(element) {\n            var projection = d3.geo.mercator().center([0, 20]).rotate([-5, 0]).scale(130).translate([element.offsetWidth / 2, element.offsetHeight / 2]);\n            var path = d3.geo.path().projection(projection);\n            return {\n                path: path,\n                projection: projection\n            };\n        },\n\n        // countries don't listed in dataset will be painted with this color\n        fills: { defaultFill: '#F5F5F5' },\n        data: dataset,\n        geographyConfig: {\n            borderColor: '#DEDEDE',\n            borderWidth: 0.7,\n            // don't change color on mouse hover\n            highlightFillColor: function highlightFillColor(geo) {\n                return geo.fillColor || '#F5F5F5';\n            },\n\n            dataUrl: $('#geo-data-url').val(),\n            // only change border\n            highlightBorderColor: '#a4a4a4',\n            highlightBorderWidth: 1,\n            highlightBorderOpacity: 1,\n            // show desired information in tooltip\n            popupTemplate: function popupTemplate(geo, data) {\n                if (data) {\n                    return getTooltipContent({\n                        name: geo.properties.name,\n                        numOfInstitutions: data.numOfInstitutions\n                    });\n                }\n                // don't show tooltip if country is not present in dataset\n                return null;\n            }\n        }\n    });\n\n    map.addPlugin('pins', function (layer, data, options) {\n        var self = this;\n        var svg = this.svg;\n\n\n        function datumHasCoords(datum) {\n            return datum && datum.latitude && datum.longitude;\n        }\n\n        function getCoordinates(datum) {\n            return datumHasCoords(datum) ? self.latLngToXY(datum.latitude, datum.longitude) : self.path.centroid(svg.select('path.' + datum.centered).data()[0]);\n        }\n\n        function getX(datum) {\n            return getCoordinates(datum)[0];\n        }\n\n        function getY(datum) {\n            return getCoordinates(datum)[1];\n        }\n\n        if (!data || data && !data.slice) {\n            handleError();\n            return;\n        }\n\n        var markers = layer.selectAll('image.datamaps-pins').data(data, JSON.stringify);\n\n        markers.enter().append('image').attr('class', 'datamaps-pin').attr('xlink:href', 'images/pin.png').attr('height', 20).attr('width', 20).attr('x', getX).attr('y', getY).on('mouseover', function (datum) {\n            var $this = d3.select(this);\n\n            if (options.popupOnHover) {\n                self.updatePopup($this, datum, options, svg);\n            }\n        }).on('mouseout', function () {\n            var $this = d3.select(this);\n\n            if (options.highlightOnHover) {\n                var previousAttributes = JSON.parse($this.attr('data-previousAttributes'));\n                $.each(previousAttributes, function (i, attr) {\n                    $this.style(i, attr);\n                });\n            }\n            d3.selectAll('.datamaps-hoverover').style('display', 'none');\n        });\n\n        markers.exit().transition().delay(options.exitDelay).attr('height', 0).remove();\n    });\n\n    map.pins(pins, {\n        popupOnHover: true,\n        popupTemplate: getTooltipContent\n    });\n\n    return map;\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    var map = void 0;\n    d3.json('/data/countryCoordinates.json', function (countryCoordinates) {\n        d3.json('/data/userMapData.json', function (err, userData) {\n            map = initializeMap(err, countryCoordinates, userData);\n        });\n    });\n\n    d3.select(window).on('resize', function () {\n        map.resize();\n    });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/webapp/dev/js/main/userMap.js\n");

/***/ }),

/***/ 41:
/*!******************************************************!*\
  !*** multi ./src/main/webapp/dev/js/main/userMap.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/joe/Git/Java123/src/main/webapp/dev/js/main/userMap.js */"./src/main/webapp/dev/js/main/userMap.js");


/***/ })

/******/ });