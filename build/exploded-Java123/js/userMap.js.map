{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/main/webapp/dev/js/common/countryCodes.js","webpack:///./src/main/webapp/dev/js/main/userMap.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","countryToCode","Afghanistan","Aland Islands","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua And Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia And Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory","Brunei Darussalam","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central African Republic","Chad","Chile","China","Christmas Island","Cocos (Keeling) Islands","Colombia","Comoros","Congo","Congo, Democratic Republic","Cook Islands","Costa Rica","Cote D'Ivoire","Croatia","Cuba","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","Falkland Islands (Malvinas)","Faroe Islands","Fiji","Finland","France","French Guiana","French Polynesia","French Southern Territories","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guernsey","Guinea","Guinea-Bissau","Guyana","Haiti","Heard Island & Mcdonald Islands","Holy See (Vatican City State)","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran","Iran, Islamic Republic Of","Iraq","Ireland","Isle Of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Korea","South Korea","Republic of Korea","Kuwait","Kyrgyzstan","Lao People's Democratic Republic","Latvia","Lebanon","Lesotho","Liberia","Libyan Arab Jamahiriya","Liechtenstein","Lithuania","Luxembourg","Macao","Macau","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Martinique","Mauritania","Mauritius","Mayotte","Mexico","MÃ©xico","Micronesia, Federated States Of","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherland","Netherlands","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","Niue","Norfolk Island","Northern Mariana Islands","Norway","Oman","Pakistan","Palau","Palestine","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Pitcairn","Poland","Portugal","Puerto Rico","Qatar","Reunion","Romania","Russia","Russian Federation","Rwanda","Saint Barthelemy","Saint Helena","Saint Kitts And Nevis","Saint Lucia","Saint Martin","Saint Pierre And Miquelon","Saint Vincent And Grenadines","Samoa","San Marino","Sao Tome And Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia And Sandwich Isl.","Spain","Sri Lanka","Sudan","Suriname","Svalbard And Jan Mayen","Swaziland","Sweden","Switzerland","Syrian Arab Republic","Taiwan","Tajikistan","Tanzania","Thailand","Timor-Leste","Togo","Tokelau","Tonga","Trinidad And Tobago","Tunisia","Turkey","Turkmenistan","Turks And Caicos Islands","Tuvalu","Uganda","Ukraine","UAE","United Arab Emirates","United Kingdom","Scotland","UK","US","United States","United States Outlying Islands","Uruguay","Uzbekistan","Vanuatu","Venezuela","Vietnam","Viet Nam","Virgin Islands, British","Virgin Islands, U.S.","Wallis And Futuna","Western Sahara","Yemen","Zambia","Zimbabwe","codeToCountryName","AFG","ALA","ALB","DZA","ASM","AND","AGO","AIA","ATA","ATG","ARG","ARM","ABW","AUS","AUT","AZE","BHS","BHR","BGD","BRB","BLR","BEL","BLZ","BEN","BMU","BTN","BOL","BIH","BWA","BVT","BRA","IOT","BRN","BGR","BFA","BDI","KHM","CMR","CAN","CPV","CYM","CAF","TCD","CHL","CHN","CXR","CCK","COL","COM","COG","COD","COK","CRI","CIV","HRV","CUB","CYP","CZE","DNK","DJI","DMA","DOM","ECU","EGY","SLV","GNQ","ERI","EST","ETH","FLK","FRO","FJI","FIN","FRA","GUF","PYF","ATF","GAB","GMB","GEO","DEU","GHA","GIB","GRC","GRL","GRD","GLP","GUM","GTM","GGY","GIN","GNB","GUY","HTI","HMD","VAT","HND","HKG","HUN","ISL","IND","IDN","IRN","IRQ","IRL","IMN","ISR","ITA","JAM","JPN","JEY","JOR","KAZ","KEN","KIR","KOR","KWT","KGZ","LAO","LVA","LBN","LSO","LBR","LBY","LIE","LTU","LUX","MAC","MKD","MDG","MWI","MYS","MDV","MLI","MLT","MHL","MTQ","MRT","MUS","MYT","MEX","FSM","MDA","MCO","MNG","MNE","MSR","MAR","MOZ","MMR","NAM","NRU","NPL","NLD","NCL","NZL","NIC","NER","NGA","NIU","NFK","MNP","NOR","OMN","PAK","PLW","PSE","PAN","PNG","PRY","PER","PHL","PCN","POL","PRT","PRI","QAT","REU","ROU","RUS","RWA","BLM","SHN","KNA","LCA","MAF","SPM","VCT","WSM","SMR","STP","SAU","SEN","SRB","SYC","SLE","SGP","SVK","SVN","SLB","SOM","ZAF","SGS","ESP","LKA","SDN","SUR","SJM","SWZ","SWE","CHE","SYR","TWN","TJK","TZA","THA","TLS","TGO","TKL","TON","TTO","TUN","TUR","TKM","TCA","TUV","UGA","UKR","ARE","GBR","USA","UMI","URY","UZB","VUT","VEN","VNM","VGB","VIR","WLF","ESH","YEM","ZMB","ZWE","getCountryCode","countryName","_countryCodes","getTooltipContent","data","numOfInstitutions","handleError","contentHolder","d3","select","html","append","text","document","addEventListener","map","json","countryCoordinates","err","userData","userCountries","keys","institutes","countriesArr","total","date","lastUpdated","forEach","countryTotal","length","push","$","dataset","pins","onlyValues","obj","minValue","Math","min","apply","maxValue","max","paletteScale","scale","linear","domain","range","item","iso","coordinates","fillColor","latitude","lat","longitude","lon","Datamap","scope","element","responsive","setProjection","projection","geo","mercator","center","rotate","translate","offsetWidth","offsetHeight","path","fills","defaultFill","geographyConfig","borderColor","borderWidth","highlightFillColor","dataUrl","val","highlightBorderColor","highlightBorderWidth","highlightBorderOpacity","popupTemplate","properties","addPlugin","layer","options","self","this","svg","getCoordinates","datum","datumHasCoords","latLngToXY","centroid","centered","slice","markers","selectAll","JSON","stringify","enter","attr","on","$this","popupOnHover","updatePopup","highlightOnHover","previousAttributes","parse","each","style","exit","transition","delay","exitDelay","remove","initializeMap","window","resize"],"mappings":"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","file":"userMap.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","// Country code data from:\n// https://gist.github.com/maephisto/9228207\n// https://github.com/michaelwittig/node-i18n-iso-countries/blob/master/codes.js\n\n/* eslint quote-props: [\"error\", \"always\"] */\n\nconst countryToCode = {\n    'Afghanistan': 'AFG',\n    'Aland Islands': 'ALA',\n    'Albania': 'ALB',\n    'Algeria': 'DZA',\n    'American Samoa': 'ASM',\n    'Andorra': 'AND',\n    'Angola': 'AGO',\n    'Anguilla': 'AIA',\n    'Antarctica': 'ATA',\n    'Antigua And Barbuda': 'ATG',\n    'Argentina': 'ARG',\n    'Armenia': 'ARM',\n    'Aruba': 'ABW',\n    'Australia': 'AUS',\n    'Austria': 'AUT',\n    'Azerbaijan': 'AZE',\n    'Bahamas': 'BHS',\n    'Bahrain': 'BHR',\n    'Bangladesh': 'BGD',\n    'Barbados': 'BRB',\n    'Belarus': 'BLR',\n    'Belgium': 'BEL',\n    'Belize': 'BLZ',\n    'Benin': 'BEN',\n    'Bermuda': 'BMU',\n    'Bhutan': 'BTN',\n    'Bolivia': 'BOL',\n    'Bosnia And Herzegovina': 'BIH',\n    'Botswana': 'BWA',\n    'Bouvet Island': 'BVT',\n    'Brazil': 'BRA',\n    'British Indian Ocean Territory': 'IOT',\n    'Brunei Darussalam': 'BRN',\n    'Bulgaria': 'BGR',\n    'Burkina Faso': 'BFA',\n    'Burundi': 'BDI',\n    'Cambodia': 'KHM',\n    'Cameroon': 'CMR',\n    'Canada': 'CAN',\n    'Cape Verde': 'CPV',\n    'Cayman Islands': 'CYM',\n    'Central African Republic': 'CAF',\n    'Chad': 'TCD',\n    'Chile': 'CHL',\n    'China': 'CHN',\n    'Christmas Island': 'CXR',\n    'Cocos (Keeling) Islands': 'CCK',\n    'Colombia': 'COL',\n    'Comoros': 'COM',\n    'Congo': 'COG',\n    'Congo, Democratic Republic': 'COD',\n    'Cook Islands': 'COK',\n    'Costa Rica': 'CRI',\n    'Cote D\\'Ivoire': 'CIV',\n    'Croatia': 'HRV',\n    'Cuba': 'CUB',\n    'Cyprus': 'CYP',\n    'Czech Republic': 'CZE',\n    'Denmark': 'DNK',\n    'Djibouti': 'DJI',\n    'Dominica': 'DMA',\n    'Dominican Republic': 'DOM',\n    'Ecuador': 'ECU',\n    'Egypt': 'EGY',\n    'El Salvador': 'SLV',\n    'Equatorial Guinea': 'GNQ',\n    'Eritrea': 'ERI',\n    'Estonia': 'EST',\n    'Ethiopia': 'ETH',\n    'Falkland Islands (Malvinas)': 'FLK',\n    'Faroe Islands': 'FRO',\n    'Fiji': 'FJI',\n    'Finland': 'FIN',\n    'France': 'FRA',\n    'French Guiana': 'GUF',\n    'French Polynesia': 'PYF',\n    'French Southern Territories': 'ATF',\n    'Gabon': 'GAB',\n    'Gambia': 'GMB',\n    'Georgia': 'GEO',\n    'Germany': 'DEU',\n    'Ghana': 'GHA',\n    'Gibraltar': 'GIB',\n    'Greece': 'GRC',\n    'Greenland': 'GRL',\n    'Grenada': 'GRD',\n    'Guadeloupe': 'GLP',\n    'Guam': 'GUM',\n    'Guatemala': 'GTM',\n    'Guernsey': 'GGY',\n    'Guinea': 'GIN',\n    'Guinea-Bissau': 'GNB',\n    'Guyana': 'GUY',\n    'Haiti': 'HTI',\n    'Heard Island & Mcdonald Islands': 'HMD',\n    'Holy See (Vatican City State)': 'VAT',\n    'Honduras': 'HND',\n    'Hong Kong': 'HKG',\n    'Hungary': 'HUN',\n    'Iceland': 'ISL',\n    'India': 'IND',\n    'Indonesia': 'IDN',\n    'Iran': 'IRN',\n    'Iran, Islamic Republic Of': 'IRN',\n    'Iraq': 'IRQ',\n    'Ireland': 'IRL',\n    'Isle Of Man': 'IMN',\n    'Israel': 'ISR',\n    'Italy': 'ITA',\n    'Jamaica': 'JAM',\n    'Japan': 'JPN',\n    'Jersey': 'JEY',\n    'Jordan': 'JOR',\n    'Kazakhstan': 'KAZ',\n    'Kenya': 'KEN',\n    'Kiribati': 'KIR',\n    'Korea': 'KOR',\n    'South Korea': 'KOR',\n    'Republic of Korea': 'KOR',\n    'Kuwait': 'KWT',\n    'Kyrgyzstan': 'KGZ',\n    'Lao People\\'s Democratic Republic': 'LAO',\n    'Latvia': 'LVA',\n    'Lebanon': 'LBN',\n    'Lesotho': 'LSO',\n    'Liberia': 'LBR',\n    'Libyan Arab Jamahiriya': 'LBY',\n    'Liechtenstein': 'LIE',\n    'Lithuania': 'LTU',\n    'Luxembourg': 'LUX',\n    'Macao': 'MAC',\n    'Macau': 'MAC',\n    'Macedonia': 'MKD',\n    'Madagascar': 'MDG',\n    'Malawi': 'MWI',\n    'Malaysia': 'MYS',\n    'Maldives': 'MDV',\n    'Mali': 'MLI',\n    'Malta': 'MLT',\n    'Marshall Islands': 'MHL',\n    'Martinique': 'MTQ',\n    'Mauritania': 'MRT',\n    'Mauritius': 'MUS',\n    'Mayotte': 'MYT',\n    'Mexico': 'MEX',\n    'MÃ©xico': 'MEX',\n    'Micronesia, Federated States Of': 'FSM',\n    'Moldova': 'MDA',\n    'Monaco': 'MCO',\n    'Mongolia': 'MNG',\n    'Montenegro': 'MNE',\n    'Montserrat': 'MSR',\n    'Morocco': 'MAR',\n    'Mozambique': 'MOZ',\n    'Myanmar': 'MMR',\n    'Namibia': 'NAM',\n    'Nauru': 'NRU',\n    'Nepal': 'NPL',\n    'Netherland': 'NLD',\n    'Netherlands': 'NLD',\n    'New Caledonia': 'NCL',\n    'New Zealand': 'NZL',\n    'Nicaragua': 'NIC',\n    'Niger': 'NER',\n    'Nigeria': 'NGA',\n    'Niue': 'NIU',\n    'Norfolk Island': 'NFK',\n    'Northern Mariana Islands': 'MNP',\n    'Norway': 'NOR',\n    'Oman': 'OMN',\n    'Pakistan': 'PAK',\n    'Palau': 'PLW',\n    'Palestine': 'PSE',\n    'Panama': 'PAN',\n    'Papua New Guinea': 'PNG',\n    'Paraguay': 'PRY',\n    'Peru': 'PER',\n    'Philippines': 'PHL',\n    'Pitcairn': 'PCN',\n    'Poland': 'POL',\n    'Portugal': 'PRT',\n    'Puerto Rico': 'PRI',\n    'Qatar': 'QAT',\n    'Reunion': 'REU',\n    'Romania': 'ROU',\n    'Russia': 'RUS',\n    'Russian Federation': 'RUS',\n    'Rwanda': 'RWA',\n    'Saint Barthelemy': 'BLM',\n    'Saint Helena': 'SHN',\n    'Saint Kitts And Nevis': 'KNA',\n    'Saint Lucia': 'LCA',\n    'Saint Martin': 'MAF',\n    'Saint Pierre And Miquelon': 'SPM',\n    'Saint Vincent And Grenadines': 'VCT',\n    'Samoa': 'WSM',\n    'San Marino': 'SMR',\n    'Sao Tome And Principe': 'STP',\n    'Saudi Arabia': 'SAU',\n    'Senegal': 'SEN',\n    'Serbia': 'SRB',\n    'Seychelles': 'SYC',\n    'Sierra Leone': 'SLE',\n    'Singapore': 'SGP',\n    'Slovakia': 'SVK',\n    'Slovenia': 'SVN',\n    'Solomon Islands': 'SLB',\n    'Somalia': 'SOM',\n    'South Africa': 'ZAF',\n    'South Georgia And Sandwich Isl.': 'SGS',\n    'Spain': 'ESP',\n    'Sri Lanka': 'LKA',\n    'Sudan': 'SDN',\n    'Suriname': 'SUR',\n    'Svalbard And Jan Mayen': 'SJM',\n    'Swaziland': 'SWZ',\n    'Sweden': 'SWE',\n    'Switzerland': 'CHE',\n    'Syrian Arab Republic': 'SYR',\n    'Taiwan': 'TWN',\n    'Tajikistan': 'TJK',\n    'Tanzania': 'TZA',\n    'Thailand': 'THA',\n    'Timor-Leste': 'TLS',\n    'Togo': 'TGO',\n    'Tokelau': 'TKL',\n    'Tonga': 'TON',\n    'Trinidad And Tobago': 'TTO',\n    'Tunisia': 'TUN',\n    'Turkey': 'TUR',\n    'Turkmenistan': 'TKM',\n    'Turks And Caicos Islands': 'TCA',\n    'Tuvalu': 'TUV',\n    'Uganda': 'UGA',\n    'Ukraine': 'UKR',\n    'UAE': 'ARE',\n    'United Arab Emirates': 'ARE',\n    'United Kingdom': 'GBR',\n    'Scotland': 'GBR',\n    'UK': 'GBR',\n    'US': 'USA',\n    'United States': 'USA',\n    'United States Outlying Islands': 'UMI',\n    'Uruguay': 'URY',\n    'Uzbekistan': 'UZB',\n    'Vanuatu': 'VUT',\n    'Venezuela': 'VEN',\n    'Vietnam': 'VNM',\n    'Viet Nam': 'VNM',\n    'Virgin Islands, British': 'VGB',\n    'Virgin Islands, U.S.': 'VIR',\n    'Wallis And Futuna': 'WLF',\n    'Western Sahara': 'ESH',\n    'Yemen': 'YEM',\n    'Zambia': 'ZMB',\n    'Zimbabwe': 'ZWE',\n};\n\nconst codeToCountryName = {\n    'AFG': 'Afghanistan',\n    'ALA': 'Aland Islands',\n    'ALB': 'Albania',\n    'DZA': 'Algeria',\n    'ASM': 'American Samoa',\n    'AND': 'Andorra',\n    'AGO': 'Angola',\n    'AIA': 'Anguilla',\n    'ATA': 'Antarctica',\n    'ATG': 'Antigua And Barbuda',\n    'ARG': 'Argentina',\n    'ARM': 'Armenia',\n    'ABW': 'Aruba',\n    'AUS': 'Australia',\n    'AUT': 'Austria',\n    'AZE': 'Azerbaijan',\n    'BHS': 'Bahamas',\n    'BHR': 'Bahrain',\n    'BGD': 'Bangladesh',\n    'BRB': 'Barbados',\n    'BLR': 'Belarus',\n    'BEL': 'Belgium',\n    'BLZ': 'Belize',\n    'BEN': 'Benin',\n    'BMU': 'Bermuda',\n    'BTN': 'Bhutan',\n    'BOL': 'Bolivia',\n    'BIH': 'Bosnia And Herzegovina',\n    'BWA': 'Botswana',\n    'BVT': 'Bouvet Island',\n    'BRA': 'Brazil',\n    'IOT': 'British Indian Ocean Territory',\n    'BRN': 'Brunei Darussalam',\n    'BGR': 'Bulgaria',\n    'BFA': 'Burkina Faso',\n    'BDI': 'Burundi',\n    'KHM': 'Cambodia',\n    'CMR': 'Cameroon',\n    'CAN': 'Canada',\n    'CPV': 'Cape Verde',\n    'CYM': 'Cayman Islands',\n    'CAF': 'Central African Republic',\n    'TCD': 'Chad',\n    'CHL': 'Chile',\n    'CHN': 'China',\n    'CXR': 'Christmas Island',\n    'CCK': 'Cocos (Keeling) Islands',\n    'COL': 'Colombia',\n    'COM': 'Comoros',\n    'COG': 'Congo',\n    'COD': 'Congo, Democratic Republic',\n    'COK': 'Cook Islands',\n    'CRI': 'Costa Rica',\n    'CIV': 'Cote D\\'Ivoire',\n    'HRV': 'Croatia',\n    'CUB': 'Cuba',\n    'CYP': 'Cyprus',\n    'CZE': 'Czech Republic',\n    'DNK': 'Denmark',\n    'DJI': 'Djibouti',\n    'DMA': 'Dominica',\n    'DOM': 'Dominican Republic',\n    'ECU': 'Ecuador',\n    'EGY': 'Egypt',\n    'SLV': 'El Salvador',\n    'GNQ': 'Equatorial Guinea',\n    'ERI': 'Eritrea',\n    'EST': 'Estonia',\n    'ETH': 'Ethiopia',\n    'FLK': 'Falkland Islands (Malvinas)',\n    'FRO': 'Faroe Islands',\n    'FJI': 'Fiji',\n    'FIN': 'Finland',\n    'FRA': 'France',\n    'GUF': 'French Guiana',\n    'PYF': 'French Polynesia',\n    'ATF': 'French Southern Territories',\n    'GAB': 'Gabon',\n    'GMB': 'Gambia',\n    'GEO': 'Georgia',\n    'DEU': 'Germany',\n    'GHA': 'Ghana',\n    'GIB': 'Gibraltar',\n    'GRC': 'Greece',\n    'GRL': 'Greenland',\n    'GRD': 'Grenada',\n    'GLP': 'Guadeloupe',\n    'GUM': 'Guam',\n    'GTM': 'Guatemala',\n    'GGY': 'Guernsey',\n    'GIN': 'Guinea',\n    'GNB': 'Guinea-Bissau',\n    'GUY': 'Guyana',\n    'HTI': 'Haiti',\n    'HMD': 'Heard Island & Mcdonald Islands',\n    'VAT': 'Holy See (Vatican City State)',\n    'HND': 'Honduras',\n    'HKG': 'Hong Kong',\n    'HUN': 'Hungary',\n    'ISL': 'Iceland',\n    'IND': 'India',\n    'IDN': 'Indonesia',\n    'IRN': 'Iran',\n    'IRQ': 'Iraq',\n    'IRL': 'Ireland',\n    'IMN': 'Isle Of Man',\n    'ISR': 'Israel',\n    'ITA': 'Italy',\n    'JAM': 'Jamaica',\n    'JPN': 'Japan',\n    'JEY': 'Jersey',\n    'JOR': 'Jordan',\n    'KAZ': 'Kazakhstan',\n    'KEN': 'Kenya',\n    'KIR': 'Kiribati',\n    'KOR': 'Republic of Korea',\n    'KWT': 'Kuwait',\n    'KGZ': 'Kyrgyzstan',\n    'LAO': 'Lao People\\'s Democratic Republic',\n    'LVA': 'Latvia',\n    'LBN': 'Lebanon',\n    'LSO': 'Lesotho',\n    'LBR': 'Liberia',\n    'LBY': 'Libyan Arab Jamahiriya',\n    'LIE': 'Liechtenstein',\n    'LTU': 'Lithuania',\n    'LUX': 'Luxembourg',\n    'MAC': 'Macau',\n    'MKD': 'Macedonia',\n    'MDG': 'Madagascar',\n    'MWI': 'Malawi',\n    'MYS': 'Malaysia',\n    'MDV': 'Maldives',\n    'MLI': 'Mali',\n    'MLT': 'Malta',\n    'MHL': 'Marshall Islands',\n    'MTQ': 'Martinique',\n    'MRT': 'Mauritania',\n    'MUS': 'Mauritius',\n    'MYT': 'Mayotte',\n    'MEX': 'Mexico',\n    'FSM': 'Micronesia, Federated States Of',\n    'MDA': 'Moldova',\n    'MCO': 'Monaco',\n    'MNG': 'Mongolia',\n    'MNE': 'Montenegro',\n    'MSR': 'Montserrat',\n    'MAR': 'Morocco',\n    'MOZ': 'Mozambique',\n    'MMR': 'Myanmar',\n    'NAM': 'Namibia',\n    'NRU': 'Nauru',\n    'NPL': 'Nepal',\n    'NLD': 'Netherlands',\n    'NCL': 'New Caledonia',\n    'NZL': 'New Zealand',\n    'NIC': 'Nicaragua',\n    'NER': 'Niger',\n    'NGA': 'Nigeria',\n    'NIU': 'Niue',\n    'NFK': 'Norfolk Island',\n    'MNP': 'Northern Mariana Islands',\n    'NOR': 'Norway',\n    'OMN': 'Oman',\n    'PAK': 'Pakistan',\n    'PLW': 'Palau',\n    'PSE': 'Palestine',\n    'PAN': 'Panama',\n    'PNG': 'Papua New Guinea',\n    'PRY': 'Paraguay',\n    'PER': 'Peru',\n    'PHL': 'Philippines',\n    'PCN': 'Pitcairn',\n    'POL': 'Poland',\n    'PRT': 'Portugal',\n    'PRI': 'Puerto Rico',\n    'QAT': 'Qatar',\n    'REU': 'Reunion',\n    'ROU': 'Romania',\n    'RUS': 'Russia',\n    'RWA': 'Rwanda',\n    'BLM': 'Saint Barthelemy',\n    'SHN': 'Saint Helena',\n    'KNA': 'Saint Kitts And Nevis',\n    'LCA': 'Saint Lucia',\n    'MAF': 'Saint Martin',\n    'SPM': 'Saint Pierre And Miquelon',\n    'VCT': 'Saint Vincent And Grenadines',\n    'WSM': 'Samoa',\n    'SMR': 'San Marino',\n    'STP': 'Sao Tome And Principe',\n    'SAU': 'Saudi Arabia',\n    'SEN': 'Senegal',\n    'SRB': 'Serbia',\n    'SYC': 'Seychelles',\n    'SLE': 'Sierra Leone',\n    'SGP': 'Singapore',\n    'SVK': 'Slovakia',\n    'SVN': 'Slovenia',\n    'SLB': 'Solomon Islands',\n    'SOM': 'Somalia',\n    'ZAF': 'South Africa',\n    'SGS': 'South Georgia And Sandwich Isl.',\n    'ESP': 'Spain',\n    'LKA': 'Sri Lanka',\n    'SDN': 'Sudan',\n    'SUR': 'Suriname',\n    'SJM': 'Svalbard And Jan Mayen',\n    'SWZ': 'Swaziland',\n    'SWE': 'Sweden',\n    'CHE': 'Switzerland',\n    'SYR': 'Syrian Arab Republic',\n    'TWN': 'Taiwan',\n    'TJK': 'Tajikistan',\n    'TZA': 'Tanzania',\n    'THA': 'Thailand',\n    'TLS': 'Timor-Leste',\n    'TGO': 'Togo',\n    'TKL': 'Tokelau',\n    'TON': 'Tonga',\n    'TTO': 'Trinidad And Tobago',\n    'TUN': 'Tunisia',\n    'TUR': 'Turkey',\n    'TKM': 'Turkmenistan',\n    'TCA': 'Turks And Caicos Islands',\n    'TUV': 'Tuvalu',\n    'UGA': 'Uganda',\n    'UKR': 'Ukraine',\n    'ARE': 'United Arab Emirates',\n    'GBR': 'United Kingdom',\n    'USA': 'United States',\n    'UMI': 'United States Outlying Islands',\n    'URY': 'Uruguay',\n    'UZB': 'Uzbekistan',\n    'VUT': 'Vanuatu',\n    'VEN': 'Venezuela',\n    'VNM': 'Vietnam',\n    'VGB': 'Virgin Islands, British',\n    'VIR': 'Virgin Islands, U.S.',\n    'WLF': 'Wallis And Futuna',\n    'ESH': 'Western Sahara',\n    'YEM': 'Yemen',\n    'ZMB': 'Zambia',\n    'ZWE': 'Zimbabwe',\n};\n\n/**\n * Get the corresponding alpha 3 code for the country name\n * Returns the code directly if the countryName is already the code\n *\n * @param  {String} countryName either full name or alpha 3 country code\n *\n * @return {String} Corresponding country code\n */\nfunction getCountryCode(countryName) {\n    if (countryName in codeToCountryName) {\n        // the country name is actually an alpha 3 code\n        return countryName;\n    }\n    if (countryName in countryToCode) {\n        // country name is defined, return the corresponding alpha 3 code\n        return countryToCode[countryName];\n    }\n    // no such country or country code\n    return null;\n}\n\nexport {\n    getCountryCode,\n};\n","/* global d3:false Datamap:false */\n\nimport {\n    getCountryCode,\n} from '../common/countryCodes';\n\nfunction getTooltipContent(data) {\n    return `<div class=\"hoverinfo\">\n                <p>\n                    <b>${data.name}</b>\n                    <br>Institutions: ${data.numOfInstitutions}\n                </p>\n            </div>`;\n}\n\nfunction handleError() {\n    const contentHolder = d3.select('.container');\n    contentHolder.html('');\n    contentHolder.append('p')\n            .text('An error has occured in getting data, please try reloading.');\n    contentHolder.append('p')\n            .html('If the problem persists after a few retries, please <a href=\"/contact.jsp\">contact us</a>.');\n}\n\nfunction initializeMap(err, countryCoordinates, userData) {\n    // based on example from https://github.com/markmarkoh/datamaps/blob/master/src/examples/highmaps_world.html\n    // Country code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\n    if (err) {\n        handleError();\n        return null;\n    }\n    const userCountries = Object.keys(userData.institutes);\n    const countriesArr = [];\n    let total = 0;\n    const date = userData.lastUpdated;\n    userCountries.forEach((countryName) => {\n        const countryTotal = userData.institutes[countryName].length;\n\n        countriesArr.push([countryName, countryTotal]);\n        total += countryTotal;\n    });\n\n    // set the last updated date in the page\n    $('#lastUpdate').html(date);\n    // set the institution count in the page\n    $('#totalUserCount').html(total);\n    // set the country count in the page\n    $('#totalCountryCount').html(userCountries.length);\n\n    // Data format example\n    // var series = [\n    //     ['United States', 1], ['Bulgaria', 1], ['Russia', 1], ['France', 1], ['Singapore', 1]\n\n    const dataset = {};\n    const pins = [];\n    const onlyValues = countriesArr.map(obj => obj[1]);\n    const minValue = Math.min.apply(null, onlyValues);\n    const maxValue = Math.max.apply(null, onlyValues);\n    const paletteScale = d3.scale.linear()\n            .domain([minValue, maxValue])\n            .range(['#428bca', '#428bca']); // Choropleth effect: .range(['#C1F0F6\",\"#4895AE\"]);\n    countriesArr.forEach((item) => {\n        const countryName = item[0];\n        const iso = getCountryCode(countryName);\n        const value = item[1];\n        const coordinates = countryCoordinates[iso];\n        dataset[iso] = {\n            numOfInstitutions: value,\n            fillColor: paletteScale(value),\n        };\n        pins.push({\n            name: countryName,\n            numOfInstitutions: value,\n            latitude: coordinates.lat,\n            longitude: coordinates.lon,\n        });\n    });\n\n    // World-map\n    const map = new Datamap({\n        scope: 'world',\n        element: $('#world-map').get(0),\n        responsive: true,\n        setProjection(element) {\n            const projection = d3.geo.mercator()\n                    .center([0, 20])\n                    .rotate([-5, 0])\n                    .scale(130)\n                    .translate([element.offsetWidth / 2, element.offsetHeight / 2]);\n            const path = d3.geo.path()\n                    .projection(projection);\n            return {\n                path,\n                projection,\n            };\n        },\n        // countries don't listed in dataset will be painted with this color\n        fills: { defaultFill: '#F5F5F5' },\n        data: dataset,\n        geographyConfig: {\n            borderColor: '#DEDEDE',\n            borderWidth: 0.7,\n            // don't change color on mouse hover\n            highlightFillColor(geo) {\n                return geo.fillColor || '#F5F5F5';\n            },\n            dataUrl: $('#geo-data-url').val(),\n            // only change border\n            highlightBorderColor: '#a4a4a4',\n            highlightBorderWidth: 1,\n            highlightBorderOpacity: 1,\n            // show desired information in tooltip\n            popupTemplate(geo, data) {\n                if (data) {\n                    return getTooltipContent({\n                        name: geo.properties.name,\n                        numOfInstitutions: data.numOfInstitutions,\n                    });\n                }\n                // don't show tooltip if country is not present in dataset\n                return null;\n            },\n        },\n    });\n\n    map.addPlugin('pins', function (layer, data, options) {\n        const self = this;\n        const { svg } = this;\n\n        function datumHasCoords(datum) {\n            return datum && datum.latitude && datum.longitude;\n        }\n\n        function getCoordinates(datum) {\n            return datumHasCoords(datum) ? self.latLngToXY(datum.latitude, datum.longitude)\n                    : self.path.centroid(svg.select(`path.${datum.centered}`).data()[0]);\n        }\n\n        function getX(datum) {\n            return getCoordinates(datum)[0];\n        }\n\n        function getY(datum) {\n            return getCoordinates(datum)[1];\n        }\n\n        if (!data || data && !data.slice) {\n            handleError();\n            return;\n        }\n\n        const markers = layer.selectAll('image.datamaps-pins').data(data, JSON.stringify);\n\n        markers\n                .enter()\n                .append('image')\n                .attr('class', 'datamaps-pin')\n                .attr('xlink:href', 'images/pin.png')\n                .attr('height', 20)\n                .attr('width', 20)\n                .attr('x', getX)\n                .attr('y', getY)\n                .on('mouseover', function (datum) {\n                    const $this = d3.select(this);\n\n                    if (options.popupOnHover) {\n                        self.updatePopup($this, datum, options, svg);\n                    }\n                })\n                .on('mouseout', function () {\n                    const $this = d3.select(this);\n\n                    if (options.highlightOnHover) {\n                        const previousAttributes = JSON.parse($this.attr('data-previousAttributes'));\n                        $.each(previousAttributes, (i, attr) => {\n                            $this.style(i, attr);\n                        });\n                    }\n                    d3.selectAll('.datamaps-hoverover').style('display', 'none');\n                });\n\n        markers.exit()\n                .transition()\n                .delay(options.exitDelay)\n                .attr('height', 0)\n                .remove();\n    });\n\n    map.pins(pins, {\n        popupOnHover: true,\n        popupTemplate: getTooltipContent,\n    });\n\n    return map;\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    let map;\n    d3.json('/data/countryCoordinates.json', (countryCoordinates) => {\n        d3.json('/data/userMapData.json', (err, userData) => {\n            map = initializeMap(err, countryCoordinates, userData);\n        });\n    });\n\n    d3.select(window).on('resize', () => {\n        map.resize();\n    });\n});\n"],"sourceRoot":""}