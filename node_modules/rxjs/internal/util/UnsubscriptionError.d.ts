<<<<<<< HEAD
export interface UnsubscriptionError extends Error {
    readonly errors: any[];
}
export interface UnsubscriptionErrorCtor {
    new (errors: any[]): UnsubscriptionError;
}
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
export declare const UnsubscriptionError: UnsubscriptionErrorCtor;
||||||| merged common ancestors
=======
<<<<<<< HEAD
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
export declare class UnsubscriptionError extends Error {
    errors: any[];
    readonly name: string;
    constructor(errors: any[]);
}
||||||| merged common ancestors
=======
export interface UnsubscriptionError extends Error {
    readonly errors: any[];
}
export interface UnsubscriptionErrorCtor {
    new (errors: any[]): UnsubscriptionError;
}
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
export declare const UnsubscriptionError: UnsubscriptionErrorCtor;
>>>>>>> 1b023684bf57de724b98ec9602a7d5b5f83ebc0f
>>>>>>> master
